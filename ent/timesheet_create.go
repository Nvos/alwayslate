// Code generated by entc, DO NOT EDIT.

package ent

import (
	"alwayslate/ent/activity"
	"alwayslate/ent/timesheet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimesheetCreate is the builder for creating a Timesheet entity.
type TimesheetCreate struct {
	config
	mutation *TimesheetMutation
	hooks    []Hook
}

// SetStartedAt sets the "started_at" field.
func (tc *TimesheetCreate) SetStartedAt(t time.Time) *TimesheetCreate {
	tc.mutation.SetStartedAt(t)
	return tc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tc *TimesheetCreate) SetNillableStartedAt(t *time.Time) *TimesheetCreate {
	if t != nil {
		tc.SetStartedAt(*t)
	}
	return tc
}

// SetEndedAt sets the "ended_at" field.
func (tc *TimesheetCreate) SetEndedAt(t time.Time) *TimesheetCreate {
	tc.mutation.SetEndedAt(t)
	return tc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (tc *TimesheetCreate) SetNillableEndedAt(t *time.Time) *TimesheetCreate {
	if t != nil {
		tc.SetEndedAt(*t)
	}
	return tc
}

// SetDuration sets the "duration" field.
func (tc *TimesheetCreate) SetDuration(t time.Duration) *TimesheetCreate {
	tc.mutation.SetDuration(t)
	return tc
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (tc *TimesheetCreate) SetActivityID(id int) *TimesheetCreate {
	tc.mutation.SetActivityID(id)
	return tc
}

// SetActivity sets the "activity" edge to the Activity entity.
func (tc *TimesheetCreate) SetActivity(a *Activity) *TimesheetCreate {
	return tc.SetActivityID(a.ID)
}

// Mutation returns the TimesheetMutation object of the builder.
func (tc *TimesheetCreate) Mutation() *TimesheetMutation {
	return tc.mutation
}

// Save creates the Timesheet in the database.
func (tc *TimesheetCreate) Save(ctx context.Context) (*Timesheet, error) {
	var (
		err  error
		node *Timesheet
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimesheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimesheetCreate) SaveX(ctx context.Context) *Timesheet {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tc *TimesheetCreate) check() error {
	if _, ok := tc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if v, ok := tc.mutation.Duration(); ok {
		if err := timesheet.DurationValidator(int64(v)); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf("ent: validator failed for field \"duration\": %w", err)}
		}
	}
	if _, ok := tc.mutation.ActivityID(); !ok {
		return &ValidationError{Name: "activity", err: errors.New("ent: missing required edge \"activity\"")}
	}
	return nil
}

func (tc *TimesheetCreate) sqlSave(ctx context.Context) (*Timesheet, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TimesheetCreate) createSpec() (*Timesheet, *sqlgraph.CreateSpec) {
	var (
		_node = &Timesheet{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timesheet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timesheet.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldStartedAt,
		})
		_node.StartedAt = value
	}
	if value, ok := tc.mutation.EndedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldEndedAt,
		})
		_node.EndedAt = value
	}
	if value, ok := tc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: timesheet.FieldDuration,
		})
		_node.Duration = value
	}
	if nodes := tc.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timesheet.ActivityTable,
			Columns: []string{timesheet.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.activity_timesheets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TimesheetCreateBulk is the builder for creating many Timesheet entities in bulk.
type TimesheetCreateBulk struct {
	config
	builders []*TimesheetCreate
}

// Save creates the Timesheet entities in the database.
func (tcb *TimesheetCreateBulk) Save(ctx context.Context) ([]*Timesheet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Timesheet, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimesheetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TimesheetCreateBulk) SaveX(ctx context.Context) []*Timesheet {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
