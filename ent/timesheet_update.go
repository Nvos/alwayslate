// Code generated by entc, DO NOT EDIT.

package ent

import (
	"alwayslate/ent/activity"
	"alwayslate/ent/predicate"
	"alwayslate/ent/timesheet"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimesheetUpdate is the builder for updating Timesheet entities.
type TimesheetUpdate struct {
	config
	hooks    []Hook
	mutation *TimesheetMutation
}

// Where adds a new predicate for the TimesheetUpdate builder.
func (tu *TimesheetUpdate) Where(ps ...predicate.Timesheet) *TimesheetUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetStartedAt sets the "started_at" field.
func (tu *TimesheetUpdate) SetStartedAt(t time.Time) *TimesheetUpdate {
	tu.mutation.SetStartedAt(t)
	return tu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tu *TimesheetUpdate) SetNillableStartedAt(t *time.Time) *TimesheetUpdate {
	if t != nil {
		tu.SetStartedAt(*t)
	}
	return tu
}

// ClearStartedAt clears the value of the "started_at" field.
func (tu *TimesheetUpdate) ClearStartedAt() *TimesheetUpdate {
	tu.mutation.ClearStartedAt()
	return tu
}

// SetEndedAt sets the "ended_at" field.
func (tu *TimesheetUpdate) SetEndedAt(t time.Time) *TimesheetUpdate {
	tu.mutation.SetEndedAt(t)
	return tu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (tu *TimesheetUpdate) SetNillableEndedAt(t *time.Time) *TimesheetUpdate {
	if t != nil {
		tu.SetEndedAt(*t)
	}
	return tu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (tu *TimesheetUpdate) ClearEndedAt() *TimesheetUpdate {
	tu.mutation.ClearEndedAt()
	return tu
}

// SetDuration sets the "duration" field.
func (tu *TimesheetUpdate) SetDuration(t time.Duration) *TimesheetUpdate {
	tu.mutation.ResetDuration()
	tu.mutation.SetDuration(t)
	return tu
}

// AddDuration adds t to the "duration" field.
func (tu *TimesheetUpdate) AddDuration(t time.Duration) *TimesheetUpdate {
	tu.mutation.AddDuration(t)
	return tu
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (tu *TimesheetUpdate) SetActivityID(id int) *TimesheetUpdate {
	tu.mutation.SetActivityID(id)
	return tu
}

// SetActivity sets the "activity" edge to the Activity entity.
func (tu *TimesheetUpdate) SetActivity(a *Activity) *TimesheetUpdate {
	return tu.SetActivityID(a.ID)
}

// Mutation returns the TimesheetMutation object of the builder.
func (tu *TimesheetUpdate) Mutation() *TimesheetMutation {
	return tu.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (tu *TimesheetUpdate) ClearActivity() *TimesheetUpdate {
	tu.mutation.ClearActivity()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TimesheetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimesheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimesheetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimesheetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimesheetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TimesheetUpdate) check() error {
	if v, ok := tu.mutation.Duration(); ok {
		if err := timesheet.DurationValidator(int64(v)); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf("ent: validator failed for field \"duration\": %w", err)}
		}
	}
	if _, ok := tu.mutation.ActivityID(); tu.mutation.ActivityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"activity\"")
	}
	return nil
}

func (tu *TimesheetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timesheet.Table,
			Columns: timesheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timesheet.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldStartedAt,
		})
	}
	if tu.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timesheet.FieldStartedAt,
		})
	}
	if value, ok := tu.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldEndedAt,
		})
	}
	if tu.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timesheet.FieldEndedAt,
		})
	}
	if value, ok := tu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: timesheet.FieldDuration,
		})
	}
	if value, ok := tu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: timesheet.FieldDuration,
		})
	}
	if tu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timesheet.ActivityTable,
			Columns: []string{timesheet.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timesheet.ActivityTable,
			Columns: []string{timesheet.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timesheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TimesheetUpdateOne is the builder for updating a single Timesheet entity.
type TimesheetUpdateOne struct {
	config
	hooks    []Hook
	mutation *TimesheetMutation
}

// SetStartedAt sets the "started_at" field.
func (tuo *TimesheetUpdateOne) SetStartedAt(t time.Time) *TimesheetUpdateOne {
	tuo.mutation.SetStartedAt(t)
	return tuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tuo *TimesheetUpdateOne) SetNillableStartedAt(t *time.Time) *TimesheetUpdateOne {
	if t != nil {
		tuo.SetStartedAt(*t)
	}
	return tuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (tuo *TimesheetUpdateOne) ClearStartedAt() *TimesheetUpdateOne {
	tuo.mutation.ClearStartedAt()
	return tuo
}

// SetEndedAt sets the "ended_at" field.
func (tuo *TimesheetUpdateOne) SetEndedAt(t time.Time) *TimesheetUpdateOne {
	tuo.mutation.SetEndedAt(t)
	return tuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (tuo *TimesheetUpdateOne) SetNillableEndedAt(t *time.Time) *TimesheetUpdateOne {
	if t != nil {
		tuo.SetEndedAt(*t)
	}
	return tuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (tuo *TimesheetUpdateOne) ClearEndedAt() *TimesheetUpdateOne {
	tuo.mutation.ClearEndedAt()
	return tuo
}

// SetDuration sets the "duration" field.
func (tuo *TimesheetUpdateOne) SetDuration(t time.Duration) *TimesheetUpdateOne {
	tuo.mutation.ResetDuration()
	tuo.mutation.SetDuration(t)
	return tuo
}

// AddDuration adds t to the "duration" field.
func (tuo *TimesheetUpdateOne) AddDuration(t time.Duration) *TimesheetUpdateOne {
	tuo.mutation.AddDuration(t)
	return tuo
}

// SetActivityID sets the "activity" edge to the Activity entity by ID.
func (tuo *TimesheetUpdateOne) SetActivityID(id int) *TimesheetUpdateOne {
	tuo.mutation.SetActivityID(id)
	return tuo
}

// SetActivity sets the "activity" edge to the Activity entity.
func (tuo *TimesheetUpdateOne) SetActivity(a *Activity) *TimesheetUpdateOne {
	return tuo.SetActivityID(a.ID)
}

// Mutation returns the TimesheetMutation object of the builder.
func (tuo *TimesheetUpdateOne) Mutation() *TimesheetMutation {
	return tuo.mutation
}

// ClearActivity clears the "activity" edge to the Activity entity.
func (tuo *TimesheetUpdateOne) ClearActivity() *TimesheetUpdateOne {
	tuo.mutation.ClearActivity()
	return tuo
}

// Save executes the query and returns the updated Timesheet entity.
func (tuo *TimesheetUpdateOne) Save(ctx context.Context) (*Timesheet, error) {
	var (
		err  error
		node *Timesheet
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimesheetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimesheetUpdateOne) SaveX(ctx context.Context) *Timesheet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TimesheetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimesheetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TimesheetUpdateOne) check() error {
	if v, ok := tuo.mutation.Duration(); ok {
		if err := timesheet.DurationValidator(int64(v)); err != nil {
			return &ValidationError{Name: "duration", err: fmt.Errorf("ent: validator failed for field \"duration\": %w", err)}
		}
	}
	if _, ok := tuo.mutation.ActivityID(); tuo.mutation.ActivityCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"activity\"")
	}
	return nil
}

func (tuo *TimesheetUpdateOne) sqlSave(ctx context.Context) (_node *Timesheet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   timesheet.Table,
			Columns: timesheet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timesheet.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Timesheet.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldStartedAt,
		})
	}
	if tuo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timesheet.FieldStartedAt,
		})
	}
	if value, ok := tuo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timesheet.FieldEndedAt,
		})
	}
	if tuo.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: timesheet.FieldEndedAt,
		})
	}
	if value, ok := tuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: timesheet.FieldDuration,
		})
	}
	if value, ok := tuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: timesheet.FieldDuration,
		})
	}
	if tuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timesheet.ActivityTable,
			Columns: []string{timesheet.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timesheet.ActivityTable,
			Columns: []string{timesheet.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Timesheet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timesheet.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
